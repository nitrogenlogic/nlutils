/*
 * Functions used for debugging purposes (e.g. printing backtraces).
 * Copyright (C)2013 Mike Bourgeous.  Released under AGPLv3 in 2018.
 */
#ifndef NLUTILS_DEBUG_H_
#define NLUTILS_DEBUG_H_

#include <dlfcn.h>

/*
 * Reads a symbol map from a file whose name is the name of the target of the
 * /proc/self/exe link with ".map" appended.  The symbol map should have been
 * generated by the nm command.  Returns the number of symbols read on success,
 * or a negated errno constant on error.  Call this at application start to
 * allow later use of functions like nl_print_backtrace().  This function is not
 * reentrant.
 */
int nl_load_symbols(void);

/*
 * Deallocates all memory used by any symbol map previously loaded using
 * nl_load_symbols().  Call this at application exit if nl_load_symbols() was
 * called.
 */
void nl_unload_symbols(void);

/*
 * Stores information about the given address into the given Dl_info structure.
 * First checks with dladdr(), then if no match is found, checks the symbol
 * table loaded by nl_load_symbols().  Returns zero on success, -1 if the
 * address is not mapped or if syminf was NULL.
 */
int nl_find_symbol(void *addr, Dl_info *syminf);

/*
 * Prints the given stack trace (using nl_fptmf() for timestamps).  The
 * backtrace should be generated by glibc's backtrace() method.  If a symbol
 * map has been loaded using nl_load_symbols(), it will be used to try to fill
 * in symbol names that are missed by dladdr().
 */
void nl_print_backtrace(FILE *out, void **trace, int count);

/*
 * Returns a pointer to a string describing the given .si_signo and .si_code
 * from siginfo_t.  See the manual page for sigaction().
 */
const char *nl_strsigcode(int signum, int si_code);

/*
 * Prints a backtrace of the current thread using glibc's backtrace() and our
 * print_backtrace().
 */
#define NL_PRINT_TRACE() do { \
	void *bk_trace[40]; \
	int bk_count; \
	bk_count = backtrace(bk_trace, ARRAY_SIZE(bk_trace)); \
	nl_fptmf(stderr, "%d backtrace elements:\n", bk_count); \
	print_backtrace(stderr, bk_trace, bk_count); \
} while(0)

#endif /* NLUTILS_DEBUG_H_ */
