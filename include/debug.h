/*
 * Functions used for debugging purposes (e.g. printing backtraces).
 * Copyright (C)2013, 2018 Mike Bourgeous.  Released under AGPLv3 in 2018.
 */
#ifndef NLUTILS_DEBUG_H_
#define NLUTILS_DEBUG_H_

#include <signal.h>
#include <execinfo.h>
#include <ucontext.h>

/*
 * Prints information about the given signal to the given file.  Useful in
 * signal handlers set by sigaction().  Uses nl_fptmf() to add thread name and
 * timestamp.  This function voids allocating memory, for safe use in signal
 * handlers.
 *
 * Parameters:
 *   out - Where to write the signal info
 *   msg - Text to include at the beginning of the signal message printed
 *   info - Detailed signal info, or NULL (see the sigaction() manual page)
 *
 * Example:
 *     nl_print_signal("Crashing due to", &(siginfo_t){.si_signo = SIGSEGV})
 *
 * Output:
 *     Crashing due to segmentation fault (11), code 0 (user-generated signal), at address 0x00000000.
 *     Originating address: 0x00000000 (no matching symbol found).
 */
void nl_print_signal(FILE *out, char *msg, siginfo_t *info);

/*
 * Prints information about the given execution context to the given file.
 * Useful in signal handlers set by sigaction().  Uses nl_fptmf() to add thread
 * name and timestamp.  This function voids allocating memory, for safe use in
 * signal handlers.
 *
 * Parameters:
 *   out - Where to write the context info
 *   ctx - Execution context info, or NULL (see the sigaction() manual page)
 *
 * Example:
 *     ucontext_t ctx;
 *     getcontext(&ctx);
 *     nl_print_context(&ctx)
 *
 * Output (x86_64):
 *     Instruction pointer: 0x12345678 (main@0x12345600 from ./blah@0x12340000).
 *     Frame pointer: 0x87654321 (no matching symbol found).
 *     Stack pointer: 0x87654000 (no matching symbol found).
 */
void nl_print_context(FILE *out, ucontext_t *ctx);

/*
 * Prints information about the current thread's execution context.  This calls
 * getcontext() and nl_print_context() for you to avoid compiler warnings about
 * potential longjmp/vfork issues even though we won't be using the context for
 * jumping.
 *
 * Parameters:
 *   out - Where to write the context info
 */
void nl_print_current_context(FILE *out);

/*
 * Prints the given stack trace (using nl_fptmf() for timestamps).  The trace
 * should usually be generated by glibc's backtrace() method, but in reality
 * any list of addresses can be provided.  The advantages of this function over
 * backtrace_symbols_fd() are the use of timestamps, and the inclusion of
 * additional detail including the name of the current thread.
 */
void nl_print_backtrace(FILE *out, void **trace, int count);

/*
 * Returns a pointer to a string describing the given .si_signo and .si_code
 * from siginfo_t.  See the manual page for sigaction().
 */
const char *nl_strsigcode(int signum, int si_code);

/*
 * Prints information about, and a backtrace of, the current thread using
 * glibc's backtrace() and our print_backtrace().
 */
#define NL_PRINT_TRACE(outfile) do { \
	void *bk_trace[40]; \
	char thread_name[17] = ""; \
	int bk_count; \
	\
	nl_get_threadname(thread_name); \
	\
	bk_count = backtrace(bk_trace, ARRAY_SIZE(bk_trace)); \
	nl_fptmf(outfile, "Thread %16s: %d backtrace elements:\n", thread_name, bk_count); \
	nl_print_current_context(outfile); \
	nl_print_backtrace(outfile, bk_trace, bk_count); \
} while(0)

#endif /* NLUTILS_DEBUG_H_ */
